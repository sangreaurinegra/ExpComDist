\babel@toc {spanish}{}\relax 
\contentsline {chapter}{\numberline {1}Introducción}{1}{chapter.1}%
\contentsline {section}{\numberline {1.1}Contexto de trabajo}{1}{section.1.1}%
\contentsline {section}{\numberline {1.2}Objetivos}{1}{section.1.2}%
\contentsline {section}{\numberline {1.3}Descripción de la solución}{2}{section.1.3}%
\contentsline {chapter}{\numberline {2}Microservicios y computación distribuida}{3}{chapter.2}%
\contentsline {section}{\numberline {2.1}Microservicios}{3}{section.2.1}%
\contentsline {subsection}{\numberline {2.1.1}Definición}{3}{subsection.2.1.1}%
\contentsline {paragraph}{ Los microservicios son componentes de software atómicos funcionalmente e independientes de los demás servicios del sistema. La independencia es vertical, aunque puede consumir y ser consumido por otros servicios (micro o no) y solo se debe cumplir con los contratos de interfaz para sustituirlo por otro. De un microservicio solo es necesario conocer los parámetros que requiere, los resultados que retorna y la ubicación. Debido a su independencia técnica cada microservicio puede ser implementado por diferentes tecnologías como, lenguajes de programación, bases de datos, servidores de aplicaciones, servidores web, entre otros. }{3}{section*.2}%
\contentsline {subsection}{\numberline {2.1.2}Arquitectura}{3}{subsection.2.1.2}%
\contentsline {paragraph}{ Las arquitecturas basadas en microservicios, son arquitecturas cuyos componentes son microservicios con bajo acoplamiento, independientemente distribuibles y con un cometido funcional muy especifico. Las mismas se aprovechan de las ventajas de los microservicios para destacarse como arquitecturas más dinámicas sobre otras monolíticas. Algunas de las ventajas son la independencia a la hora de distribuir que permite actualizarlos sin actualizar toda la aplicación, poder utilizar la herramienta correcta para el problema específico, escalamiento preciso al poder escalar los microservicios que son necesarios y no toda app. Debido a todas características, como una buena escalabilidad, granularidad fina, bajo acoplamiento, desarrollo continuo, y bajo costo de mantenimiento, la arquitectura de microservicios ganó muchos intereses tanto en la industria como comunidad académica. Cada microservicio realiza una función específica subtarea o servicio, que requiere menos recursos de cómputo y reduce la sobrecarga de comunicación. Tales características hace que la arquitectura de microservicios sea una buena candidata para construir una plataforma flexible, que sea fácil de desarrollar y mantener. }{3}{section*.3}%
\contentsline {subsection}{\numberline {2.1.3}Beneficios}{4}{subsection.2.1.3}%
\contentsline {subsubsection}{Independencia de despliegue}{4}{section*.4}%
\contentsline {paragraph}{ Quizás la característica más importante de los microservicios es que debido a que los servicios son más pequeños y se pueden implementar de forma independiente, es posible realizar cambios en ellos, que mediante estrategias no afectarían al resto del sistema. Esto permite realizar cambios de manera más ágil sin la necesidad de dedicar tanto a impactar cambios en un sistema monolítico. Y citando a \cite {ibmmicroservicios}, el bajo acoplamiento de los microservicios también crea un grado de aislamiento de fallas y una mejor resiliencia en las aplicaciones. Y el pequeño tamaño de los servicios, combinado con sus límites claros y patrones de comunicación, facilita que los nuevos miembros del equipo comprendan el código base y contribuyan rápidamente, un claro beneficio en términos de velocidad y moral de los desarrolladores. }{4}{section*.5}%
\contentsline {subsubsection}{Herramienta adecuada para la solución}{4}{section*.6}%
\contentsline {paragraph}{ En los patrones tradicionales de arquitectura en capas, una aplicación normalmente comparte una base de datos relacional utilizado un mimso stack tecnologico. Este enfoque tiene varios inconvenientes, el más importante de los cuales es que cada componente de una aplicación debe compartir un modelo de datos y una pila en comun, aunque exista una mejor herramienta para realizar el trabajo que se quiere agregar al sistema. En el caso de un modelo de microservicios, los componentes se implementan de forma independiente y se comunican a través de una combinación de REST \cite {RESTWikimedia2022Jan}, transmisión de eventos y agentes de mensajes. Gracias a este tipo de implementación se puede optimizar la pila de cada servicio individualmente. Dado que la tecnología cambia todo el tiempo es muy importante tener la posibilidad de realizar cambios de la forma más rápida y adoptar nuevas herramientas para resolver nuevos problemas sin que el stack tecnológico limite esos cambios \cite {ibmmicroservicios}. }{4}{section*.7}%
\contentsline {subsubsection}{Escalamiento preciso}{4}{section*.8}%
\contentsline {paragraph}{ Los microservicios permiten además de implemetar los servicios de forma individual, escalar estos servicios individualmetne. Por lo tanto microservicios requieren menos infraestructura que las aplicaciones monolíticas porque permiten escalar con precisión solo los componentes que lo requieren, en lugar de toda la aplicación en el caso de las aplicaciones monolíticas. Este punto es quizas uno de los más importantes en cuanto a su aplicacion en Big Data. }{4}{section*.9}%
\contentsline {subsubsection}{Ubicación estratégica}{5}{section*.10}%
\contentsline {paragraph}{ Los microservicios pueden ser ubicados en distintos lugares ya sea por motivos físicos o técnicos, de acuerdo a las necesidades planteadas. Un ejemplo de motivos físicos sería que la fuente de datos que debe consumir el microservicio se encuentre en un lugar lejano, en este caso es preferible que el microservicio que la utilice este cerca de la fuente. Estando cerca de la fuente el microservicio no solo puede acceder a los datos de manera más rápida, sino que al retornar datos resumidos podría acelerar el procesamiento de un sistema con un componente central que utilice los datos retornados (ejemplos IoT, edge). En cuanto a los motivos técnicos para la ubicación de los microservicios se puede indicar que el hecho de que puedan ser implementados por distintas tecnologías, permite que se puedan implementar para dispositivos de bajos recursos como pueden ser los dispositivos edge. }{5}{section*.11}%
\contentsline {subsection}{\numberline {2.1.4}Desafíos}{5}{subsection.2.1.4}%
\contentsline {subsubsection}{Manejo de contenedores}{5}{section*.12}%
\contentsline {paragraph}{ Cuando Docker marcó el comienzo de la era de los contenedores modernos en 2013, también introdujo el modelo informático que se asociaría más estrechamente con los microservicios. Debido a que los contenedores individuales no tienen la sobrecarga de su propio sistema operativo, son más pequeños y livianos que las máquinas virtuales tradicionales. Al ser livianos pueden escalar rápidamente, combinando perfectamente con los servicios que se encuentran dentro de las arquitecturas de microservicios. Con la proliferación de servicios y contenedores, orquestar y administrar grandes grupos de contenedores se convirtió en uno de los desafíos críticos. Kubernetes, una plataforma de orquestación de contenedores de código abierto, se ha convertido en una de las soluciones de orquestación más populares debido a que es un sistema funcionalmente correcto y robusto \cite {ibmmicroservicios}. }{5}{section*.13}%
\contentsline {subsubsection}{Puertos de enlace a las API}{5}{section*.14}%
\contentsline {paragraph}{ Los microservicios a menudo se comunican a través de API, especialmente cuando se establece el estado por primera vez. Si bien es cierto que los clientes y los servicios pueden comunicarse entre sí directamente, cuando la cantidad de servicios en una aplicación crece con el tiempo las puertas de enlace API comiezan a ser necesarias. Una puerta de enlace API actúa como un proxy inverso ruteando solicitudes de los clientes, distribuyendo las solicitudes en múltiples servicios, proporcionando seguridad y autenticación. Existen varias tecnologías para implementar puertas de enlace de API. Si la arquitectura de microservicios se implementa con contenedores y Kubernetes, generalmente se utiliza Ingress o ultiemamente Istio \cite {ibmmicroservicios}. }{6}{section*.15}%
\contentsline {subsubsection}{Mensajería y transmisión de eventos}{6}{section*.16}%
\contentsline {paragraph}{ En ciertos casos hay sistemas que necesitan manejar estados, por lo que es necesario propagar los cambios de estado entre los diferentes componentes del sistema. Aunque es comun que el llamado a una API define el estado inicial de un servicio, no es una forma efectiva de mantener el servicio actualizado. Hacer pooling sobre ju servicio en particular para estar al tanto de los cambios no es práctico. Es necesario acoplar las llamadas API de establecimiento de estado con mensajería o transmisión de eventos para que los servicios puedan propagar los cambios de estado. Probablemente lo mejor sería utilizar intermediario de mensajes de propósito general, una plataforma de transmisión de eventos como Apache Kafka \cite {BibEntry2022Apr} o Nats \cite {nats} \cite {micronats}, podría ser una buena opción. Al combinar microservicios con arquitectura basada en eventos, los desarrolladores pueden crear sistemas distribuidos, altamente escalables, tolerantes a fallas y extensibles que pueden consumir y procesar grandes cantidades de eventos o información en tiempo real \cite {ibmmicroservicios}. }{6}{section*.17}%
\contentsline {subsubsection}{Serverless}{6}{section*.18}%
\contentsline {paragraph}{ En el caso de las arquitecturas serverless, la unidad de ejecución no es solo un pequeño servicio, sino una función. La línea que separa una función serverless de un microservicio es borrosa, pero comúnmente se entiende que las funciones son incluso más pequeñas que un microservicio. Las arquitecturas serverless y las plataformas de funciones como servicio (FaaS function as a service) comparten afinidad con los microservicios, ya que ambas crean unidades de implementación más pequeñas y escalan con la demanda de manera precisa\cite {ibmmicroservicios}. }{6}{section*.19}%
\contentsline {subsection}{\numberline {2.1.5}Big Data}{6}{subsection.2.1.5}%
\contentsline {subsection}{\numberline {2.1.6}Patrones}{7}{subsection.2.1.6}%
\contentsline {subsubsection}{Decomposition patterns}{7}{section*.20}%
\contentsline {paragraph}{Decompose by business capability}{8}{section*.21}%
\contentsline {paragraph}{Decompose by subdomain}{8}{section*.22}%
\contentsline {subsubsection}{Messaging style patterns}{9}{section*.23}%
\contentsline {paragraph}{Messaging}{9}{section*.24}%
\contentsline {paragraph}{Remote procedure invocation}{9}{section*.25}%
\contentsline {subsubsection}{Reliable communications patterns}{9}{section*.26}%
\contentsline {paragraph}{Circuit breaker}{9}{section*.27}%
\contentsline {paragraph}{Service discovery patterns}{9}{section*.28}%
\contentsline {paragraph}{3rd party registration}{9}{section*.29}%
\contentsline {paragraph}{Client-side discovery}{9}{section*.30}%
\contentsline {paragraph}{Self-registration}{9}{section*.31}%
\contentsline {paragraph}{Server-side discovery}{9}{section*.32}%
\contentsline {subsubsection}{Transactional messaging patterns}{9}{section*.33}%
\contentsline {paragraph}{Polling publisher}{9}{section*.34}%
\contentsline {paragraph}{Transaction log tailing}{9}{section*.35}%
\contentsline {paragraph}{Transactional outbox}{9}{section*.36}%
\contentsline {subsubsection}{Data consistency patterns}{9}{section*.37}%
\contentsline {paragraph}{Saga}{9}{section*.38}%
\contentsline {subsubsection}{Business logic design patterns}{9}{section*.39}%
\contentsline {paragraph}{Aggregate}{9}{section*.40}%
\contentsline {paragraph}{Domain event}{9}{section*.41}%
\contentsline {paragraph}{Domain model}{9}{section*.42}%
\contentsline {paragraph}{Event sourcing}{9}{section*.43}%
\contentsline {paragraph}{Transaction script}{9}{section*.44}%
\contentsline {subsubsection}{Querying patterns}{10}{section*.45}%
\contentsline {paragraph}{API composition}{10}{section*.46}%
\contentsline {paragraph}{Command query responsibility segregation}{10}{section*.47}%
\contentsline {subsubsection}{External API patterns}{10}{section*.48}%
\contentsline {paragraph}{API gateway}{10}{section*.49}%
\contentsline {paragraph}{Backends for frontends}{10}{section*.50}%
\contentsline {subsubsection}{Testing patterns}{10}{section*.51}%
\contentsline {paragraph}{Consumer-driven contract test}{10}{section*.52}%
\contentsline {paragraph}{Consumer-side contract test}{10}{section*.53}%
\contentsline {paragraph}{Service component test}{10}{section*.54}%
\contentsline {subsubsection}{Security patterns}{10}{section*.55}%
\contentsline {paragraph}{Access token}{10}{section*.56}%
\contentsline {subsubsection}{Cross-cutting concerns patterns}{10}{section*.57}%
\contentsline {paragraph}{Externalized configuration}{10}{section*.58}%
\contentsline {paragraph}{Microservice chassis}{10}{section*.59}%
\contentsline {subsubsection}{Observability patterns}{10}{section*.60}%
\contentsline {paragraph}{Application metrics}{10}{section*.61}%
\contentsline {paragraph}{Audit logging}{10}{section*.62}%
\contentsline {paragraph}{Distributed tracing}{10}{section*.63}%
\contentsline {paragraph}{Exception tracking}{10}{section*.64}%
\contentsline {paragraph}{Health check API}{10}{section*.65}%
\contentsline {paragraph}{Log aggregation}{10}{section*.66}%
\contentsline {subsubsection}{Deployment patterns}{10}{section*.67}%
\contentsline {paragraph}{Deploy a service as a container}{10}{section*.68}%
\contentsline {paragraph}{Deploy a service as a VM}{10}{section*.69}%
\contentsline {paragraph}{Language-specific packaging format}{11}{section*.70}%
\contentsline {paragraph}{Service mesh}{11}{section*.71}%
\contentsline {paragraph}{Serverless deployment}{11}{section*.72}%
\contentsline {paragraph}{Sidecar}{11}{section*.73}%
\contentsline {subsubsection}{Refactoring to microservices patterns}{11}{section*.74}%
\contentsline {paragraph}{Anti-corruption layer}{11}{section*.75}%
\contentsline {paragraph}{Strangler application}{11}{section*.76}%
\contentsline {section}{\numberline {2.2}Computación distribuida}{11}{section.2.2}%
\contentsline {section}{\numberline {2.3}Cloud Computing}{11}{section.2.3}%
\contentsline {section}{\numberline {2.4}Introducción}{12}{section.2.4}%
\contentsline {section}{\numberline {2.5}Modelos de Servicios}{12}{section.2.5}%
\contentsline {section}{\numberline {2.6}Modelos despliegue}{13}{section.2.6}%
\contentsline {section}{\numberline {2.7}Ventajas y desventajas del cloud}{14}{section.2.7}%
\contentsline {subsection}{\numberline {2.7.1}Ventajas del uso de cloud}{14}{subsection.2.7.1}%
\contentsline {subsection}{\numberline {2.7.2}Desventajas del uso de cloud}{14}{subsection.2.7.2}%
\contentsline {section}{\numberline {2.8}Arquitecturas en la nube}{15}{section.2.8}%
\contentsline {section}{\numberline {2.9}Ejemplo Cloud - Microsoft Azure}{15}{section.2.9}%
\contentsline {subsection}{\numberline {2.9.1}Modelos de ejecución}{17}{subsection.2.9.1}%
\contentsline {subsection}{\numberline {2.9.2}Modelos de almacenamiento}{19}{subsection.2.9.2}%
\contentsline {subsection}{\numberline {2.9.3}HDInsight}{20}{subsection.2.9.3}%
\contentsline {chapter}{\numberline {3}Descripción de la investigación}{23}{chapter.3}%
\contentsline {section}{\numberline {3.1}Frameworks}{23}{section.3.1}%
\contentsline {subsection}{\numberline {3.1.1}Spring Boot}{23}{subsection.3.1.1}%
\contentsline {subsection}{\numberline {3.1.2}Quarkus}{23}{subsection.3.1.2}%
\contentsline {paragraph}{Kubernetes}{23}{section*.83}%
\contentsline {paragraph}{Construir y pushear imagenes de contenedores.}{23}{section*.84}%
\contentsline {paragraph}{Generar recursos de Kubernetes.}{24}{section*.85}%
\contentsline {paragraph}{Despliegue de servicios Quarkus.}{24}{section*.86}%
\contentsline {paragraph}{Desarrollar operadores Kubernetes.}{24}{section*.87}%
\contentsline {paragraph}{Despliegue de servicios en Knative.}{24}{section*.88}%
\contentsline {subsection}{\numberline {3.1.3}Micronaut}{24}{subsection.3.1.3}%
\contentsline {subsection}{\numberline {3.1.4}Helidon}{24}{subsection.3.1.4}%
\contentsline {chapter}{\numberline {4}Trabajos relacionados}{25}{chapter.4}%
\contentsline {section}{\numberline {4.1}Artículos}{25}{section.4.1}%
\contentsline {subsection}{\numberline {4.1.1}An Experimental Study on Microservices based Edge Computing Platforms }{25}{subsection.4.1.1}%
\contentsline {subsection}{\numberline {4.1.2}Microservice-Oriented Platform for Internet of Big Data Analytics: A Proof of Concept }{26}{subsection.4.1.2}%
\contentsline {subsection}{\numberline {4.1.3}Orquestación de servicios para el desarrollo de aplicaciones para big data }{28}{subsection.4.1.3}%
\contentsline {subsection}{\numberline {4.1.4}Automation of distributed data management in applied microservices package for scientific computations }{30}{subsection.4.1.4}%
\contentsline {subsection}{\numberline {4.1.5}Emerging Technologies in Computer Engineering: Microservices in Big Data Analytics: Second International Conference, {ICETCE} 2019, Jaipur, India, February 1–2, 2019, Revised Selected Papers }{31}{subsection.4.1.5}%
\contentsline {subsection}{\numberline {4.1.6}An Efficient and Adaptive Method for Collision Probability of Ships, Icebergs Using CNN and DBSCAN Clustering Algorithm }{31}{subsection.4.1.6}%
\contentsline {subsection}{\numberline {4.1.7}Smart Judiciary System: A Smart Dust Based IoT Application }{32}{subsection.4.1.7}%
\contentsline {subsection}{\numberline {4.1.8}The Survival Analysis of Big Data Application Over Auto-scaling Cloud Environment }{32}{subsection.4.1.8}%
\contentsline {subsection}{\numberline {4.1.9} Rating Prediction by Combining User Interest and Friendly Relationship }{34}{subsection.4.1.9}%
\contentsline {subsection}{\numberline {4.1.10}Microservices in Big Data Analytics: Second International, {ICETCE} 2019, Rajasthan, India, February 1st-2nd 2019, Revised Selected Papers }{34}{subsection.4.1.10}%
\contentsline {subsection}{\numberline {4.1.11}An Efficient ATM Surveillance Framework Using Optical Flow with CNN }{34}{subsection.4.1.11}%
\contentsline {subsection}{\numberline {4.1.12}Comparison of Execution Time of Mobile Application Using Equal Division and Profile-Based Algorithm in Mobile Cloud Computing }{35}{subsection.4.1.12}%
\contentsline {section}{\numberline {4.2}Libros}{36}{section.4.2}%
\contentsline {section}{\numberline {4.3}Productos Comerciales}{37}{section.4.3}%
\contentsline {chapter}{\numberline {5}Solución Propuesta}{39}{chapter.5}%
\contentsline {section}{\numberline {5.1}Arquitectura}{39}{section.5.1}%
\contentsline {chapter}{\numberline {6}Análisis}{41}{chapter.6}%
\contentsline {chapter}{\numberline {7}Conclusiones}{43}{chapter.7}%
\contentsline {chapter}{\numberline {A}Apendice}{49}{appendix.Alph1}%
